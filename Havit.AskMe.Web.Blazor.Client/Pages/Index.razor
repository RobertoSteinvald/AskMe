@page "/"
@page "/{PageIndex:int}"
@using Havit.AskMe.Web.Blazor.Shared.Contracts
@using Havit.AskMe.Web.Blazor.Shared.Contracts.Questions
@inject Havit.AskMe.Web.Blazor.Client.Services.IQuestionClientFacade QuestionClientFacade
@inject NavigationManager NavigationManager

@if (questions == null)
{
	<p><em>Načítám...</em></p>
}
else
{
	@foreach (var item in questions.Data)
	{
		var id = $"q_{item.QuestionId}";
		<article class="answer" id="@id" @key="@item.QuestionId">
			<section class="question">
				<header>
					<span class="fa-stack fa-lg">
						<i class="fas fa-square fa-stack-2x"></i>
						<i class="fas fa-question fa-stack-1x fa-inverse"></i>
					</span>
					<span class="info">
						<i class="fas fa-tag"></i> @item.CategoryName
						<i class="fas fa-calendar"></i>  <Time Value="@item.DateCreated" />
						@if (!string.IsNullOrWhiteSpace(item.DisplayName))
						{
							<span><i class="fas fa-user"></i> @item.DisplayName</span>
						}
					</span>
				</header>
				<PlainText Text="@item.QuestionText" HtmlEncode="true" />
			</section>
			<section class="answer">
				<header>
					<span class="fa-stack fa-lg">
						<i class="fas fa-square fa-stack-2x"></i>
						<i class="fas fa-comment fa-stack-1x fa-inverse"></i>
					</span>
					<span class="info">
						<i class="fas fa-calendar"></i> <Time Value="@item.DateAnswered" />
					</span>
				</header>
				<PlainText Text="@item.AnswerText" HtmlEncode="true" />
				<AuthorizeView>
					<footer>
						<a href="@("Admin/" + item.QuestionId)" class="button"><i class="fas fa-commenting"></i> Upravit</a>
					</footer>
				</AuthorizeView>
			</section>
		</article>
	}
	<Pager Data="@questions" OnPageChanging="@PageChanging" />
}

@code
{
	[Parameter]
	public int PageIndex { get; set; } = 0;

	private CollectionDataResult<List<QuestionListItemVM>> questions;

	protected override async Task OnInitializedAsync()
	{
		await LoadQuestions();
	}

	private async Task PageChanging(PagerBase.PageChangingEventArgs args)
	{
		// "redirect"
		//NavigationManager.NavigateTo($"/{args.NewPageNumber}"); // BUG: does not set the PageIndex property (https://github.com/aspnet/AspNetCore/issues/10686)


		this.PageIndex = args.NewPageNumber - 1;
		await LoadQuestions();
	}

	private async Task LoadQuestions()
	{
		this.questions = await QuestionClientFacade.GetQuestionsAsync(new QuestionListQueryFilter() { PageIndex = this.PageIndex, Answered = true });
	}
}